use colored::Colorize;
use std::net::TcpListener;
use std::thread;

mod client;
mod command;
mod utils;

fn main() {
    let ascii = r#"
           .%@@@@@@@@@@@@@@@@@@@@@@@%:.                       .=@@@@@@@@@@@@@@@@@@@@@@@@+.
            :#@@@@@@@@@@@@@@@@@@@@@@@%-.                    ..*@@@@@@@@@@@@@@@@@@@@@@@%=.
                           .+@@@@@@@@@%:.                   .*@@@@@@@@@@=.
               ............  =@@@@@@@@@@-.                 .*@@@@@@@@@%-. ...........
               .#@@@@@@@@@%:..=@@@@@@@@@@=.              ..*@@@@@@@@@@- .-@@@@@@@@@@=.
                .#@@@@@@@@@%. .-@@@@@@@@@@-              .*@@@@@@@@@@:. -%@@@@@@@@@=.
                 .*@@@@@@@@@@:. -@@@@@@@@@@+.           .#@@@@@@@@@%. .-@@@@@@@@@@-
                  .*@@@@@@@@@%- .-@@@@@@@@@@+.        .:%@@@@@@@@@%:..=@@@@@@@@@@-.
                    =@@@@@@@@@@-. :@@@@@@@@@@+.       .%@@@@@@@@@%. .=@@@@@@@@@@:.
                    .+@@@@@@@@@@=..-@@@@@@@@@@*.    .:@@@@@@@@@@#...+@@@@@@@@@%:
                     .=@@@@@@@@@@=. :@@@@@@@@@@*.   -%@@@@@@@@@#. .+@@@@@@@@@@-.
                      .=@@@@@@@@@@+. :%@@@@@@@@@#. :@@@@@@@@@@*. .*@@@@@@@@@%:.
                       .=@@@@@@@@@@+..:%@@@@@@@@@%*@@@@@@@@@@*...#@@@@@@@@@#:
                        .-@@@@@@@@@@+...%@@@@@@@@@@@@@@@@@@@*. .#@@@@@@@@@%..
                          :@@@@@@@@@@#...#@@@@@@@@@@@@@@@@@+  .#@@@@@@@@@#.
                          .:@@@@@@@@@@#...#@@@@@@@@@@@@@@@+. :%@@@@@@@@@#:
                           ..%@@@@@@@@@#...*@@@@@@@@@@@@@=. :#@@@@@@@@@#.
                             :#@@@@@@@@@%:..*@@@@@@@@@@@-..:%@@@@@@@@@+.
                              .#@@@@@@@@@%:..*@@@@@@@@@-..-%@@@@@@@@@*.
                               .*@@@@@@@@@@:..+@@@@@@@:..:%@@@@@@@@@*.
                                .*@@@@@@@@@@-..+@@@@%:..-@@@@@@@@@@+.
                                ..*@@@@@@@@@@-..=@@%:..-@@@@@@@@@@=.
                                  .+@@@@@@@@@@=..-+. .=@@@@@@@@@@=.
                                  ..+@@@@@@@@@@=.   .+@@@@@@@@@@-.
                                    .=@@@@@@@@@@+. .+@@@@@@@@@@-.
                                     .=@@@@@@@@@@*:+@@@@@@@@@%:.
                                      .-@@@@@@@@@@@@@@@@@@@@@-.
                                       .:%@@@@@@@@@@@@@@@@@%:.
                                        .-@@@@@@@@@@@@@@@@%:
                                         .:@@@@@@@@@@@@@@%:.
                                           :%@@@@@@@@@@@#.
                                           ..%@@@@@@@@@#.
                                             .#@@@@@@@#.
                                              .*@@@@@+.
                                               .*@@@*.
                                                .+@*.
"#;
    println!("{}", ascii.purple());
    let listener = TcpListener::bind("0.0.0.0:1234").expect("Couldn't bind this address...");

    println!("[*] Waiting for clients to connect...");
    for stream in listener.incoming() {
        if let Ok(stream) = stream {
            thread::spawn(move || {
                client::Client::handle_client(stream);
            });
        } else {
            println!("[*] A client tried to connect...");
        }
    }
}
